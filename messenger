#! /usr/bin/gforth

require string.fs

\ prepare randomizer
require random.fs
utime d>s seed !

\ the buffer for string operations
create command_line_buffer 256 chars allot
variable clb

\ define configuration reader
\ ---------------------------
vocabulary config
config definitions
: -leading  ( addr len -- addr' len' ) begin over c@ bl = while 1 /string repeat ;
: trim      ( addr len -- addr len) -leading -trailing ;
: # ( -- )      1 PARSE 2DROP ; \ comment
: = ( addr --)  1 PARSE trim ROT PLACE ; \ string assignment
forth definitions

\ run & read from system/shell commands
User sh$  cell uallot drop
: sh-get ( addr u -- addr' u' )
sh$ free-mem-var
r/o open-pipe throw dup >r slurp-fid
r> close-pipe throw to $? 2dup sh$ 2! ;

\ read config file
\ ----------------
-1 value dnd_begin
-1 value dnd_end
-1 value dnd_enabled
variable DND_BEGIN_HOUR 5 allot
variable DND_END_HOUR 5 allot
variable TELEGRAM_BOT_ID 32 allot
variable MESSENGER_FOLDER 120 allot
variable DOCKER_SEND_COMMAND 100 allot

: read_config
s" /etc/messenger.conf" file-status nip dup 0<>
if ." cannot find configuration at: /etc/messenger.conf - rc: " . cr bye 
else drop then
s" /etc/messenger.conf" config included forth
DND_BEGIN_HOUR number? 0<> if to dnd_begin else 0 to dnd_enabled then
DND_END_HOUR number? 0<> if to dnd_end else 0 to dnd_enabled then ;

: config_info
." DND_BEGIN_HOUR=" dnd_begin . cr
." DND_END_HOUR=" dnd_end . cr
." TELEGRAM_BOT=" TELEGRAM_BOT_ID count type cr
." Do-Not-Disturb mode: " dnd_enabled invert if ." enabled" else ." disabled" then cr ;

\ check if docker messenger is running
: check_telegram_docker ( -- f ) 0 ;

: houroftheday ( -- n )
utime d>s 3600000000 / dup 24 / 24 * - ;

: string-compare ( uaddr1 count1 uaddr2 count2 -- f )
rot over                           ( ua1 ua2 c2 c1 c2 )
= if                               ( ua1 ua2 c2 )
 >r true rot rot r>                ( true ua1 ua2 c2 )
 0 ?do                             ( true ua1 ua2 )
  over i + c@ over i + c@          ( true ua1 ua2 ch1 ch2 )
  <> if                            ( true ua1 ua2 )
   rot drop false rot rot
  then
 loop
 drop drop
else                               ( ua1 ua2 c2 )
 drop drop drop false
then ;

\ return true if dnd mode disabled or currently not within dnd times
: time_ok? ( -- f ) 
dnd_enabled if
houroftheday dnd_end dnd_begin within
else true then ;

\ process all files from folder
: process_hold_messages
." process hold messages" cr
s\" for m in " clb $!
MESSENGER_FOLDER count clb $+!
s\" /hold/*.msg; do if [ ! -f \"$m\" ]; then continue; fi; " clb $+!
DOCKER_SEND_COMMAND count clb $+!
s\"  -f \"$m\"; if [ $? -eq 0 ]; then rm \"$m\"; fi; sleep 3; done" clb $+!
clb $@ system clb $off ;

\ dispatch a message to send with docker container function
\ $ docker exec telegram-bot python3 send_telegram.py msg
: docker_dispatch ( msg -- rc )
over over ." dispatch message: " type cr
DOCKER_SEND_COMMAND count clb $!                 \ load with docker command
s\"  -t \"" clb $+!                              \ add text argument switch and opening quote
clb $+!                                          \ add message as argument
s\" \"" clb $+!                                  \ add closing quote
clb $@ type cr
clb $@ system clb $off $? ;

: docker_filemessage_dispatch ( filepath ccount -- rc )
DOCKER_SEND_COMMAND count clb $!                 \ load with docker command
s"  -f " clb $+!                                 \ add switch
clb $+!                                          \ add message as argument
." dispatch using command: " clb $@ type cr
clb $@ system clb $off $? ;

\ add a single character to a string variable
\ : append_char { caddr chr -- } caddr dup count dup chars rot + chr swap c! 1 chars + swap c! ;

\ append a number of random chars a..z to a string
: append_random_chars { string num -- }
num 0 ?do rnd 26 mod 97 + pad c! pad 1 string $+! loop ;

: path_to_outmessagefile { path_string -- }
MESSENGER_FOLDER path_string $!
s" /out/" path_string $+!                           \ append a slash char
path_string 12 append_random_chars
s" .msg" path_string $+! ;

: path_to_holdmessagefile { path_string -- }
MESSENGER_FOLDER count path_string $!
s" /hold/" path_string $+!                           \ append a slash char
path_string 12 append_random_chars
s" .msg" path_string $+! ;

: hold_message { msg length -- }
\ create a filename where to store
clb path_to_holdmessagefile
clb dup $@ ." hold message in file: " type cr
w/o create-file throw
dup msg length rot
write-file throw
close-file throw ;

: copy-files ( src_path src_count -- )
slurp-file clb path_to_holdmessagefile
clb $@ w/o create-file throw    \ ( srcd srcc fid )
clb $off dup >r rot rot r>                            \ ( fid srcd srcc fid )
write-file throw close-file throw
;

: hold_message_file ( srcpath ccount -- )
clb path_to_holdmessagefile clb $@ 
s" move file to: " type clb $@ type cr
rename-file throw ;

: main
read_config config_info
time_ok? dup if process_hold_messages then
argc @ 2 = if 1 arg                           \ message argument available
  \ time ok? then dispatch, otherwise hold
  rot if
   docker_dispatch 0 <> abort" Error while dispatching message"
   else hold_message then
 then 
argc @ 3 = if 
 1 arg s" -f" string-compare if
  time_ok? if
   2 arg docker_filemessage_dispatch 0 <> abort" Error while dispatching message from file"
   2 arg delete-file throw
   else 2 arg hold_message_file then
  then
 then
;

main bye
